
* CANCELLED ASIO 的研究
  CLOSED: [2023-06-03 Sat 20:00]
  - State "CANCELLED"  from "STARTED"    [2023-06-03 Sat 20:00] \\
    我怕是看不玩啊, 那么多模板
  :LOGBOOK:
  CLOCK: [2023-06-03 Sat 19:01]--[2023-06-03 Sat 19:40] =>  0:39
  - [X] asio 的线程模型
    - [X] io_service 
      - [X] 线程安全
        - [X] 单线程是安全的
        - [X] 多线程情况 : 同一个对象的不同方法, 如果没有被 io_service 分发到不同的线程同时执行, 则是安全的
      - [X] 使用方法
        - [X] Post
        - [X] 把 Sockte 构造, 然后 RUN 
    - [X] one io_servcie per thread - 某个线程不能阻塞
    - [X] one io_service multhread - 线程安全问题
  CLOCK: [2023-06-03 Sat 16:27]--[2023-06-03 Sat 16:47] =>  0:20
  - [ ] Asio 的历史
  :END:


* STARTED [#A] Libevent 
  :LOGBOOK:
  CLOCK: [2023-06-04 Sun 20:44]--[2023-06-04 Sun 21:12] =>  0:28
  - [ ] Event_base 
  CLOCK: [2023-06-04 Sun 20:24]--[2023-06-04 Sun 20:44] =>  0:20
  - [ ] Epoll 与 Reactor2 
  CLOCK: [2023-06-04 Sun 19:10]--[2023-06-04 Sun 20:11] =>  1:01
  - [ ] Epoll 与 Reactor 
  :END:

- [ ] 目标
  - [ ] 编写 Epoll 服务器和客户端
  - [ ] 使用 Reactor 结构改造上面的程序

  

* STARTED [#A] <<操作系统导论>>
  - [ ] 基于锁的并发数据结构
  - [ ] 条件变量详解
  - [ ] 信号量
  - [ ] 常见的并发问题
  - [ ] 基于事件的并发
  :LOGBOOK:
  CLOCK: [2023-06-05 Mon 11:54]--[2023-06-05 Mon 13:03] =>  1:09
  - [X] [100%] 锁详解 1: 自旋锁的原理
    - [X] 不借助硬件实现自旋锁
      - [X] 安全性 - 锁本身也会发生竞争条件
      - [X] 性能   - 一个线程没有获取锁, 将会一直 While 旋转, 当单个 CPU 时, 只能等待上下文切换
    - [X] 借助 原子交换 (test-and-set 指令实现自旋锁)
    - [X] 自旋锁的优势与劣势
      - [X] 单 CPU 时候很浪费, 因为多个线程都变成在自旋, 上下文切换也没用
      - [X] 多 CPU 时, 因为任务完成的快, 反而另一个 CPU 的线程只需等待一会避免了线程切换.
  CLOCK: [2023-06-05 Mon 10:26]--[2023-06-05 Mon 10:59] =>  0:33
  - [X] [100%] 线程的最基本 API 
    - [X] pthread_create / pthread_join
    - [X] pthread_mutex_ / pthread_mytex_try

      互斥锁是不得到锁就会一直阻塞, trylock 是会直接失败返回
    - [X] pthread_cond_wait / pthread_cond_signal()

      线程的协作, 两个的 API 的前置条件都是要拿到锁. Wait 放弃锁进入睡眠, 等到条件成熟, 由另外的线程唤醒他并让他重新得到锁. 
  CLOCK: [2023-06-05 Mon 09:33]--[2023-06-05 Mon 10:22] =>  0:49
  - [X] [100%] 线程的并发问题
    - [X] 线程并发访问的竞争问题
      - [X] 如何诞生 - 访问数据是由多条指令完成, 如果处于中间状态被中断然后切换至其他线程, 那么其他线程看到的是中间数据.
      - [X] 提到了解决问题的方向是原子操作, 就是硬件或操作系统保证线程访问数据是没有或一次完成, 没有中间状态. 
      - [X] 提出临界区的概念, 只有单个线程能进入的代码片段, 叫做临界区, 保证了只有一个线程访问数据, 不会被中断, 没有中间状态.
    - [X] 提到线程除了并发访问的另一个用途, 唤醒与交互
  CLOCK: [2023-06-04 Sun 21:36]--[2023-06-04 Sun 22:26] =>  0:50
  - [X] 进程的虚拟化复习
  :END:

  
* STARTED [#A] C++ 
  :LOGBOOK:
  CLOCK: [2023-06-06 Tue 15:23]--[2023-06-06 Tue 16:35] =>  1:12
  CLOCK: [2023-06-06 Tue 14:07]--[2023-06-06 Tue 14:30] =>  0:23
  CLOCK: [2023-06-06 Tue 13:00]--[2023-06-06 Tue 13:59] =>  0:59
  CLOCK: [2023-06-06 Tue 09:16]--[2023-06-06 Tue 10:10] =>  0:54
  CLOCK: [2023-06-06 Tue 07:59]--[2023-06-06 Tue 08:56] =>  0:57
  CLOCK: [2023-06-05 Mon 23:15]--[2023-06-06 Tue 00:20] =>  1:05
  CLOCK: [2023-06-05 Mon 19:16]--[2023-06-05 Mon 20:21] =>  1:05
  - [-] [66%] 通过 <<C++ 新经典复习当年的知识>>
    - [X] STL 
      - [X] 容器
      - [X] 迭器
      - [X] 算法
      - [X] 函数对象(又名仿函数) : 用于算法, 可以用内置和自己实现函数对象, 好处就是把函数像对象一样保持
      - [X] 适配器
        - [X] STL 适配器   : Stack
        - [X] 迭代器适配器 : reverse_iter
        - [X] 函数适配器   : bind, 我理解是生成新的函数对象, 
    - [X] 线程
      - [X] 锁
      - [X] 条件变量
      - [X] 任务 task
      - [X] 線程傳遞套餐 promise發送/future接受 
      - [X] 原子操作 - 講的非常差
    - [ ] 智能指针
  CLOCK: [2023-06-05 Mon 18:40]--[2023-06-05 Mon 19:16] =>  0:36
  - [X] 确定学习目标
  :END:

- [-] 通过 <<C++ 新经典复习当年的知识>>
  - [X] STL 
  - [ ] 智能指针
  - [ ] 线程
- [ ] 通过 <<C++ 新特性>> 与 C 比较进行进阶
- [ ] C++ 并发学习并发编程
- [ ] 用 C++ 重写 Libevent-linux 版本, 1000 行搞定 


  
* TODO <<计算机网络>>


* STARTED <<数据结构>>
  :LOGBOOK:
  CLOCK: [2023-06-07 Wed 16:51]--[2023-06-07 Wed 17:01] =>  0:10
  CLOCK: [2023-06-07 Wed 14:19]--[2023-06-07 Wed 16:51] =>  2:32
  CLOCK: [2023-06-07 Wed 08:08]--[2023-06-07 Wed 14:19] =>  6:11
  :END:


* STARTED 代码训练
  :LOGBOOK:
  CLOCK: [2023-06-08 Thu 14:49]--[2023-06-08 Thu 15:36] =>  0:47
  - [ ] EPOLLHUB/EPOLLIN 等参数
    - [ ] 当对端关闭时候, EPOLLHUB 和 EPOLLERR 都会触发, 那么多此一举添加 EPOLLRDHUB 的意义在哪里?

  CLOCK: [2023-06-08 Thu 14:18]--[2023-06-08 Thu 14:40] =>  0:22
  - [ ] 回顾昨晚遇到的问题, 应该怎么看这本书
  :END:
  

* STARTED 游双
  :LOGBOOK:
  CLOCK: [2023-06-08 Thu 17:20]--[2023-06-08 Thu 18:39] =>  1:19
  - [X] [100%] 定时器章节
    - [X] 如何设置定时
      - [X] 不靠谱的 socket 参数, 通过 setsockopt 设置返回时间, 不靠谱, 因为每个 socket 都设置一个不可能.
      - [X] sigalrm 定时发送信号, 通过 PIPE 唤醒 EPOLL，然后检查容器的绝对时间
    - [X] 定时容器 (先跳过)
      - [X] 时间轮
      - [X] 最小堆
  - [ ] IO 复用 (EPOLL 章节与练习)
  - [ ] Libevnet 
  :END:



* STARTED 实现链表定时器, 踢掉空闲用户, 如果 3S 没有发送消息, 则主动关闭连接
  :LOGBOOK:
  CLOCK: [2023-06-08 Thu 19:04]--[2023-06-08 Thu 19:43] =>  0:39
  :END:


* STARTED Asio
  :LOGBOOK:
  CLOCK: [2023-06-10 Sat 15:39]--[2023-06-10 Sat 16:10] =>  0:31
  CLOCK: [2023-06-10 Sat 15:30]--[2023-06-10 Sat 15:39] =>  0:09
  CLOCK: [2023-06-10 Sat 14:14]--[2023-06-10 Sat 15:30] =>  1:16
  CLOCK: [2023-06-09 Fri 11:20]--[2023-06-09 Fri 12:17] =>  0:57
  - [X] 了解 Boost Asio 的协程体系与相关 API 
  CLOCK: [2023-06-09 Fri 11:06]--[2023-06-09 Fri 11:10] =>  0:04
  CLOCK: [2023-06-09 Fri 10:47]--[2023-06-09 Fri 11:05] =>  0:18
  - [X] 看懂 Echo 的 C++20 Asio 协程语法
  CLOCK: [2023-06-09 Fri 10:08]--[2023-06-09 Fri 10:27] =>  0:19
  - [X] 看懂 Chat 的 C++ 20 Asio 协程语法
  CLOCK: [2023-06-09 Fri 09:39]--[2023-06-09 Fri 10:03] =>  0:24
  - [X] 查看 C++ 各个版本的区别的,  
    - [X] C++03 :  每次读需要组织两个函数 (1) 发起调用 (2) onhandle 完成函数, 当然为了简化.
    - [X] C++11/14 : 通过 Lambda 把两个函数组织在一起, 发起连接，然后 Lambda 里面写完成函数
    - [X] 协程 : 连 Lambda 都不用了, 同步的写法
  CLOCK: [2023-06-09 Fri 00:27]--[2023-06-09 Fri 02:00] =>  1:33
  - [X] 练习
  CLOCK: [2023-06-08 Thu 22:12]--[2023-06-08 Fri 22:45] =>  0:33
  - [X] 练习
  CLOCK: [2023-06-08 Thu 20:33]--[2023-06-08 Thu 21:53] =>  1:20
  - [X] 基本搞懂 Chat 服务器端的逻辑与所有函数
  :END:

- [ ] Asio 越学越心虚, 因为自己写不出来这么牛逼的厍
- [ ] 那就不要学, 直接用
- [ ] 


* STARTED Boost 数据库
  :LOGBOOK:
  CLOCK: [2023-06-09 Fri 20:58]--[2023-06-09 Fri 23:46] =>  2:48
  CLOCK: [2023-06-09 Fri 18:10]--[2023-06-09 Fri 18:45] =>  0:35
  - [X] 学习 Mysql 一晚上学好
    
  - [X] 配置 Mysql 环境 


    libmysql++-dev - MySQL C++ library bindings (development)
    libmysql++-doc - MySQL C++ library bindings (documentation and examples)
    libmysql++3v5 - MySQL C++ library bindings (runtime)
    libmysqlcppconn-dev - MySQL Connector for C++ (development files)
    libmysqlcppconn7v5 - MySQL Connector for C++ (library)
    default-libmysqlclient-dev - MySQL database development files (metapackage)
    default-libmysqld-dev - MySQL embedded database development files (metapackage)
    default-mysql-client - MySQL database client binaries (metapackage)
    default-mysql-client-core - MySQL database core client binaries (metapackage)
    default-mysql-server - MySQL database server binaries and system database setup (metapackage)default-mysql-server-core - MySQL database server binaries (metapackage)
    mysql-common - MySQL database common files, e.g. /etc/mysql/my.cnf
    libmysql-ocaml - OCaml bindings for MySql (runtime package)


  - [ ] 使用 MysqlConnection JDBC 接口与 LibMysql++ 存储比较两者的区别
  CLOCK: [2023-06-09 Fri 16:15]--[2023-06-09 Fri 17:45] =>  1:30
  - [X] 收集并搞定 C++ 数据库客户端的生态

    + 非常重要的信息两个信息 :
      * 数据库天然就是分为客户端和服务器端且使用 TCP Sockte 连接
      * 数据库客户端不追求异步, 直接阻塞

    基于这两个信息, 我终于找对了路.

    C++ 不是没有数据库客户端, 而是各个数据库官网提供的 C/C++ API 就是数据库客户端.

    C++ 没有的是像 JAVA 一样的在语言层面提供的 JDBC, 规范可以让 JAVA 在语言层面使用一样的接口访问不同的数据库, C++ 语言层没有内置,
    也许不同的厂商可以实现 C++ 版本的 JDBC，让 C++ 用一样的接口访问他们的数据库.
    例如 Mysql 就有一个 Mysql Connection, 但也许没有, 我没有调查.

    最后, JDBC 也并不是唯一的好的抽象, 根据 C++ 不跨平台且造轮子的尿性, 说不定还更加喜好 Mysql++ 这种非 JDBC 接口.
  CLOCK: [2023-06-09 Fri 15:09]--[2023-06-09 Fri 15:55] =>  0:46
  - [X] C++ 数据库 Client 的生态
    - [X] LibMysql++-dev 简称 Mysql++ 或 Mysqlpp

      大一用过其 C 接口, 是手动封装 SQL 语句.
      知乎上看到有人用 Asio 封装, 提供异步和网络功能.
    - [X] SUN 公司开发的模仿 JAVA JDBC 的 ODBC : Mysql-connector-cpp, 当然新版非常高级, 连智能指针都有了, 没有细看, 操作和 JAVA 的 JDBC 一样, 当然配套的框架没有 Java 那么牛逼
      
      趣事: 这个是 SUN 开发的, 支持全平台, 大一的时候不会看 github, 看了 CSDN 的教材教我怎么下载 DLL 导入 VS, 我以为是微软家的, 所以没用.
            最后在 Linux 平台用原始的 C API 填写字符串, 有点可惜.
    - [X] Boost-mysql 
      
      进入 Boost 厍, 基于 Asio, 肯定用这个, 直接和 Asio 的异步配合, 肯定用这个
  :END:


要是这种程度不如别学

* STARTED C++ Asio 异步回调训练
  :LOGBOOK:
  CLOCK: [2023-06-11 Sun 00:45]--[2023-06-11 Sun 01:43] =>  0:58
  - [X] Chat Server 回调

  CLOCK: [2023-06-10 Sat 23:27]--[2023-06-11 Sun 00:07] =>  0:40
  - [X] 从头实现 Echo Server Lambda
  CLOCK: [2023-06-10 Sat 19:51]--[2023-06-10 Sat 21:17] =>  1:26
  CLOCK: [2023-06-10 Sat 16:35]--[2023-06-10 Sat 17:33] =>  0:58
  - [X] Echo Server 回调
  :END:

- [-] Echo Server 
  - [X] Lambda 回调
  - [ ] 协程
    
- [ ] Chat Server
  - [ ] Lambda
  - [ ] 协程
    
* STARTED Asio 协程训练
  :LOGBOOK:
  CLOCK: [2023-06-11 Sun 08:44]
  - [ ] Echo 
  :END:
